from collections import Counter

dna_sequence = "ATGGCCATTGTAATGGGCCGCTGAAAGGGTGCCCGATAG"

def find_motif(sequence, motif):
    positions = []
    motif_length = len(motif)
    for i in range(len(sequence) - motif_length + 1):
        if sequence[i:i + motif_length] == motif:
            positions.append(i)
    return positions

def calculate_gc_content(sequence):
    gc_count = sequence.count("G") + sequence.count("C")
    gc_content = (gc_count / len(sequence)) * 100
    return gc_content

def find_coding_regions(sequence):
    start_codon = "ATG"
    stop_codons = ["TAA", "TAG", "TGA"]
    coding_regions = []
    
    i = 0
    while i < len(sequence):
        if sequence[i:i + 3] == start_codon:
            for j in range(i + 3, len(sequence) - 2, 3):
                if sequence[j:j + 3] in stop_codons:
                    coding_regions.append((i, j + 3))
                    i = j + 3
                    break
        i += 1
    return coding_regions

print(f"Original DNA sequence: {dna_sequence}")

motif = "GGG"
motif_positions = find_motif(dna_sequence, motif)
print(f"Motif '{motif}' found at positions: {motif_positions}")

gc_content = calculate_gc_content(dna_sequence)
print(f"GC Content: {gc_content:.2f}%")

coding_regions = find_coding_regions(dna_sequence)
if coding_regions:
    for region in coding_regions:
        print(f"Coding region found at position {region[0]} to {region[1]}: {dna_sequence[region[0]:region[1]]}")
else:
    print("No coding region found")
